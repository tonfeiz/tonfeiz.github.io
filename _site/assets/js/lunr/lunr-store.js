var store = [{
        "title": "Arts Weekone Leetcode941",
        "excerpt":"Given an array A of integers, return true if and only if it is a valid mountain array. Recall that A is a mountain array if and only if: A.length &gt;= 3 There exists some i with 0 &lt; i &lt; A.length - 1 such that: A[0] &lt; A[1] &lt;...","categories": [],
        "tags": [],
        "url": "http://localhost:4000/ARTS-WeekOne-Leetcode941/",
        "teaser":null},{
        "title": "Arts Weekone Twelve Factor(一)",
        "excerpt":"Twelve-Factor指的是构建Saas的应用程序应当满足的12个特性。   这些应用程序具备的特点包括：     使用声明式方法(declarative formats)来自动化设置，以此最小化新的成员加入工程的时间和花费   与底层的操作系统之间有明确的协议，以此最大化不同执行环境之间的可移植性   适合于部署在现代云平台上，避免了服务器和系统管理员的需要   最小化开发环境(development)和生产环境(production)之间的分歧，为了最大化灵活性使用持续部署   能够在不显著改变工具、架构或者开发实践的基础上自由扩展   上面有一些名词是我暂时还不太理解的，这里做个简单的解释。     声明式方法：倾向于直接告诉计算机做什么，而不是告诉计算机怎么做的方法。具体可见declarative programming   持续部署：和持续部署相关的概念还有持续集成和持续交付。持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。(引自知乎yumminhuang)   生产环境、开发环境：软件应用开发的几个环境包括：开发环境(development)，集成环境(integration)、测试环境(testing)、QA验证、模拟环境(staging)、生产环境(production)   本是打算一次性把这12个特性都叙述一遍，但发现其中涉及到许多自己不知道的东西，因此决定还是分批来，本周先仔细看3个特性。   一、基准代码(codebase)  这一特性用一句话说就是，只有一个用版本控制系统跟踪的代码库，但可以有许多部署(deploy)   在中心化的版本管理系统中，一个codebase就是单个的代码库。在去中心化的版本管理系统中，一个codebase就是共享一个根提交(root commit)的代码库   需要注意的是，在codebase和app之间永远是一对一的关系，如果有多个codebase，那就不是一个app，而是一个分布式系统，其中的每个组件都应当是一个满足twelve-factor的app。   然而，一个app可以有多个部署。例如在生产环境中的部署，在每个开发环境上的部署等。   不同部署的codebase是相同的，但是每个活跃的部署可以是不同的版本。   二、依赖  这一特性用一句话说就是，显示的声明依赖并隔离它们   这一章读的还不太懂，可能是自身还缺乏关于微服务方面的知识的原因。   一个满足这一特性的app绝不会依赖于隐式的系统级别的库。它会使用依赖清单来显式声明自己所依赖的所有依赖项，并且会在执行期间使用依赖隔离工具来防止外界系统的隐式依赖泄漏进来(leak in)。对Ruby来说，依赖清单就是Gemfile，依赖隔离工具就是bundle exec。对Python来说，依赖清单就是pip，依赖隔离工具就是virtualenv。   这么做的一个优势就是对于新来的开发者来说，他只需要安装语言运行时环境以及依赖管理工具就可以进行app的开发。   twelve-factor app也不会隐式的依赖任何系统工具，即便这些工具在大部分操作系统上都存在，例如curl。   三、配置  将配置存在环境中   一个app的配置是在不同的部署中不同的东西。有些app将这些配置直接硬编码到代码中，这是违反twelve-factor的。配置应该从代码中严格的分离开来。当然对于内在的配置，即在不同部署中相同的配置，可以直接硬编码。   一种配置方法是使用配置文件。配置文件不应当被放入版本控制系统中，但这一点容易被忽略，而且大多配置文件往往基于特定的语言或是框架。   twelve-factor app将配置存在环境变量中。注意，使用组合的环境变量会使app失去可扩展性(组合的环境变量存疑)，最好还是将每个环境变量单独使用。  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/ARTS-WeekOne-Twelve-Factor(%E4%B8%80)/",
        "teaser":null},{
        "title": "搭建个人博客",
        "excerpt":"关于写博客，其实早就想写了。写博客的好处也从各种渠道都听说过，奈何实在是懒。现在由于看到了ARTS，觉得挺有用的，也想养成长期主动学习的习惯，因此就把博客搞起来，作为这个计划的集合地，当然其它想写的时候也会随便写一些文章。 搭建博客的教程网上有很多，随便找一个基本上就能搭建完成。我也是拼拼凑凑搭出来的，现在也还只是个雏形。这里还是做个记录，毕竟别人的经验始终是别人的，自己写出来的才是自己的。 一、利用github pages托管网站 搭建自己的博客首先得有自己的网站，要有自己的网站首先得有服务器主机来维护它，作为非土豪人士，自己买服务器托管网站这种事是干不出来的。因此，可以使用github pages来托管自己的网站。 github pages是一个静态站点服务，主要就用来直接从github repo生成网站。因为之前一直也用github，因此一些基本操作也是轻车熟路了，使用它也是基于这个考虑。 github pages也有一些缺陷，这里简单的列举几点： 它是静态站点服务，不支持服务端代码，例如PHP，Ruby或者Python github pages所在的repo最好不要超过1GB 发布的github pages网站不能超过1GB github pages站点的软带宽每个月不超过100GB 对于一般的个人博客网站来说，这些限制应该问题不大。 接下去说说具体的流程。 在github上创建一个repo，这个repo的名字必须是username.github.io,其中username就是你在github上的用户名 选择一个文件夹作为github repo的存放地，例如就在$HOME目录下，在终端下输入下面的命令： git clone https://github.com/username/username.github.io 进入上面的文件夹，创建一个index.html文件。命令如下： cd username.github.io echo \"Hello World\" &gt; index.html 将改变上传到github端。命令如下： git add -all git commit -m \"Initial commit\" git push -u origin master 至此，网站就可以查看了。可以在浏览器中输入 https://username.github.io...","categories": [],
        "tags": [],
        "url": "http://localhost:4000/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
        "teaser":null},{
        "title": "Arts Weekone Vimtutor总结",
        "excerpt":"虽然一直在使用vim编辑器，但其实一直没有练习过。借着ARTS中T的名头，就稍微学习一下vimtutor并将其中的总结放在这。   一     使用h，j，k，l作为vim中光标的移动键(比上下左右要有效率的多)。   使用:q!(quit!)强制退出当前正在编辑的文件   使用x删除当前光标停留处的文字   使用i(insert)在当前光标位置处插入内容   使用A(Append)在当前最后一行处添加内容   二     使用dw(delete word)来删除当前光标处的一个单词   使用d$删除当前位置到行末的所有内容   许多改变文本的命令都由一个operator和motion组成，例如d代表删除operator，而motion可以有如下选择：            w：直到下一个单词的起始位置，不包括该起始位置       e: 直到当前单词的结束位置，包括该结束位置       $: 直到当前行的结尾，包括最后一个单词   如果只按上述motion则可以让光标按motion移动           在motion前面可以使用数字进行对多个motion的操作   使用0到一行的起始位置处   使用dd删除一整行数据   使用u来撤销上一个操作，U来修复一整行的操作，CTRL-R来撤销撤销操作   三     使用p(put或paste)来放置vim寄存器中的文本数据(可通过dd，d，yy等操作得到)   使用r(replace)来替换当前光标处的文本   使用c(change)+motion来改变文版，注意按c之后会进入插入模式   四     使用CTRL-G命令显示当前文件名以及总行数、当前行数   使用G(Go)到当前文件底端，gg到当前文件顶端,[number]G到[number]行   使用/[text]搜索和[text]一样的文本，n是前进，N是后退   使用%来匹配各种括号   使用:s(substitute)来替进行各种替换   五     使用:!来执行外部的shell命令，例如:!ls就可以列举目录   使用:w(write) FILENAME来将当前已经写完的内容写入某个文件   使用v(visual)进入可视化模式，选择部分内容并利用:w来将这些内容写入某个文件   使用:r(read) FILENAME来将目标文件的内容读入当前正在编辑的文件中(不一定是文件内容，某个命令的输出也可以，感觉和管道或是重定向很像)   六     使用o来在当前行下面插入一行，使用O来在当前行上面插入一行   使用a来在当前光标的下一个位置插入文本   使用R来批量替换文本   使用y来复制，p来粘贴。   总结  对我来说，这个教程比较有用的是2.3,4.4和5.5。以后还要多多练习，对这些基本操作更加熟练  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/ARTS-WeekOne-vimtutor%E6%80%BB%E7%BB%93/",
        "teaser":null}]
